(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{398:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"路由配置和侧边栏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由配置和侧边栏"}},[t._v("#")]),t._v(" 路由配置和侧边栏")]),t._v(" "),a("p",[t._v("路由和侧边栏是组织起一个后台应用的关键骨架。")]),t._v(" "),a("p",[t._v("本项目侧边栏和路由是绑定在一起的，所以你只有在"),a("code",[t._v("src/router/index.ts")]),t._v("下面配置对应的路由，侧边栏就能动态的生成了。大大减轻了手动重复编辑侧边栏的工作量。当然这样就需要在配置路由的时候遵循一些约定的规则。")]),t._v(" "),a("h2",{attrs:{id:"配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[t._v("#")]),t._v(" 配置项")]),t._v(" "),a("p",[t._v("首先我们了解一下本项目配置路由时提供了哪些配置项。")]),t._v(" "),a("div",{staticClass:"language-javaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  redirect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'noredirect'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当设置 noredirect 的时候该路由在面包屑导航中不可被点击")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'router-name'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设定路由的名字，一定要填写不然使用<keep-alive>时会出现各种问题")]),t._v("\n  meta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    hidden"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当设置 true 的时候该路由不会再侧边栏出现 如404，login等页面(默认 false)")]),t._v("\n    alwaysShow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当你一个路由下面的 children 声明的路由大于1个时，自动会变成嵌套的模式，")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有一个时，会将那个子路由当做根路由显示在侧边栏，")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若你想不管路由下面的 children 声明的个数都显示你的根路由，")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你可以设置 alwaysShow: true，这样它就会忽略之前定义的规则，")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一直显示根路由(默认 false)")]),t._v("\n    title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该路由在侧边栏和面包屑中展示的名字")]),t._v("\n    icon"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'svg-name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置该路由的图标")]),t._v("\n    noCache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果设置为true，则不会被 <keep-alive> 缓存(默认 false)")]),t._v("\n    breadcrumb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果设置为false，则不会在breadcrumb面包屑中显示(默认 true)")]),t._v("\n    affix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果设置为true，则会一直固定在tag项中(默认 false)")]),t._v("\n    noTagsView"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果设置为true，则不会出现在tag中(默认 false)")]),t._v("\n    activeMenu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/dashboard'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示高亮的路由路径")]),t._v("\n    followAuth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/dashboard'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跟随哪个路由进行权限过滤")]),t._v("\n    showMainRoute"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为true即使hidden为true，也依然可以进行路由跳转(默认 false)")]),t._v("\n    followRoute"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/dashboard'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为路由设置跟随其他路由的权限")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),a("p",[t._v("这里的路由分为两种，"),a("code",[t._v("constantRoutes")]),t._v(" 和 "),a("code",[t._v("asyncRoutes")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("constantRoutes")]),t._v("： 代表那些不需要动态判断权限的路由，如登录页、404、等通用页面。")]),t._v(" "),a("p",[a("code",[t._v("asyncRoutes")]),t._v("： 代表那些需求动态判断权限并通过 "),a("code",[t._v("addRoutes")]),t._v(" 动态添加的页面。")]),t._v(" "),a("h2",{attrs:{id:"侧边栏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#侧边栏"}},[t._v("#")]),t._v(" 侧边栏")]),t._v(" "),a("p",[t._v("本项目侧边栏主要基于 "),a("code",[t._v("element-ui")]),t._v(" 的 "),a("code",[t._v("el-menu")]),t._v(" 改造。")]),t._v(" "),a("p",[t._v("侧边栏是通过读取路由并结合权限判断而动态生成的，而且还需要支持路由无限嵌套，所以这里还使用到了递归组件。")]),t._v(" "),a("p",[t._v("具体代码可查看"),a("code",[t._v("src/layout/components/Sider/index.vue")])]),t._v(" "),a("h2",{attrs:{id:"多级目录-嵌套路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多级目录-嵌套路由"}},[t._v("#")]),t._v(" 多级目录(嵌套路由)")]),t._v(" "),a("p",[t._v("如果你的路由是多级目录，如本项目 "),a("code",[t._v("src/views/level")]),t._v(" 那样，有三级路由嵌套的情况下，不要忘记还要手动在二级目录的根文件下添加一个 "),a("code",[t._v("<router-view />")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"路由缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由缓存"}},[t._v("#")]),t._v(" 路由缓存")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("本项目中路由都是默认缓存的，这里涉及到了嵌套路由的缓存问题。为了保证多级路由缓存可以正常使用，本项目中在动态路由中，把二级以下的路由全部转换成二级路由，菜单栏还是遵循开发者的嵌套结构来渲染。")]),t._v(" "),a("p",[t._v("具体过滤代码可以查看"),a("code",[t._v("src/store/modules/permission.ts")])])]),t._v(" "),a("h2",{attrs:{id:"面包屑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面包屑"}},[t._v("#")]),t._v(" 面包屑")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("本项目中也封装了一个面包屑导航，它也是通过 "),a("code",[t._v("watch $route")]),t._v(" 变化动态生成的。它和 "),a("code",[t._v("menu")]),t._v(" 也一样，也可以通过之前那些配置项控制一些路由在面包屑中的展现。大家也可以结合自己的业务需求增改这些自定义属性。比如可以在路由中声明"),a("code",[t._v("breadcrumb:false")]),t._v("，让其不在 "),a("code",[t._v("breadcrumb")]),t._v(" 面包屑显示。")]),t._v(" "),a("p",[t._v("具体代码可以查看"),a("code",[t._v("src/layout/components/Breadcrumb/index.vue")])])]),t._v(" "),a("h2",{attrs:{id:"标签页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签页"}},[t._v("#")]),t._v(" 标签页")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("本项目中每进行一次路由跳转，都会相应的把跳转的路由进行存储，进而在 "),a("code",[t._v("标签页")]),t._v(" 中展示，让开发者可以快速的进行路由历史记录的操作。如果不需要，可以在路由配置中设置"),a("code",[t._v("noTagsView: true")]),t._v("即可隐藏。")]),t._v(" "),a("p",[t._v("组件具体代码可查看"),a("code",[t._v("src/layout/components/TagsView/index.vue")])]),t._v(" "),a("p",[t._v("标签页过滤代码可查看"),a("code",[t._v("src/store/modules/tags-view.ts")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);